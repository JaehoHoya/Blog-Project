{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst usePagination = countPerPage => {\n  _s();\n  // state: 전체 객체 리스트 상태 \n  const [totalList, setTotalList] = useState([]);\n  // state: 보여줄 객체 리스트 상태 \n  const [viewList, setViewList] = useState([]);\n  //state: 현재 페이지 번호 상태 \n  const [currentPage, setCurrentPage] = useState(1);\n\n  //state: 전체 페이지 번호 리스트 상태 \n  const [totalPageList, setTotalPageList] = useState([1]);\n  //state: 보여줄 페이지 번호 리스트 상태 \n  const [viewPageList, setViewPageList] = useState([1]);\n\n  //state: 현재 섹션 상태 \n  const [currentSection, setCurrentSection] = useState(1);\n  //state: 전체 섹션 상태 \n  const [totalSection, setTotalSection] = useState(1);\n\n  //function: 보여줄 객체 리스트 추출 함수 \n  const setView = () => {\n    const FIRST_INDEX = countPerPage * (currentPage - 1);\n    const LAST_INDEX = totalList.length > countPerPage * currentPage ? countPerPage * currentPage : totalList.length;\n    const viewList = totalList.slice(FIRST_INDEX, LAST_INDEX);\n    setViewList(viewList);\n  };\n\n  //function: 보여줄 페이지 리스트 추출 함수 \n  const setViewPage = () => {\n    const FIRST_INDEX = 10 * (currentSection - 1);\n    const LAST_INDEX = totalPageList.length > 10 * currentSection ? 10 * currentSection : totalPageList.length;\n    const viewPageList = totalPageList.slice(FIRST_INDEX, LAST_INDEX);\n    setViewPageList(viewPageList);\n  };\n\n  //effect: total list가 변경될때마다 실행할 작업 \n  useEffect(() => {\n    const totalPage = Math.ceil(totalList.length / countPerPage);\n    const totalPageList = [];\n    for (let page = 1; page <= totalPage; page++) totalPageList.push(page);\n    setTotalPageList(totalPageList);\n    const totalSection = Math.ceil(totalList.length / (countPerPage * 10));\n    setTotalSection(totalSection);\n    setCurrentPage(1);\n    setCurrentSection(1);\n  }, [totalList, countPerPage]);\n\n  //effect: current page가 변경될때마다 실행할 작업 \n  useEffect(() => {\n    setView();\n  }, [currentPage, totalList, countPerPage]);\n\n  //effect: current section이 변경될때마다 실행할 작업 \n  useEffect(() => {\n    setViewPage();\n  }, [currentSection, totalPageList]);\n  return {\n    currentPage,\n    setCurrentPage,\n    currentSection,\n    setCurrentSection,\n    viewList,\n    viewPageList,\n    totalSection,\n    setTotalList\n  };\n};\n_s(usePagination, \"41zKgswxwSvp1Y1q7IsdIXFDenU=\");\nexport default usePagination;","map":{"version":3,"names":["useEffect","useState","usePagination","countPerPage","_s","totalList","setTotalList","viewList","setViewList","currentPage","setCurrentPage","totalPageList","setTotalPageList","viewPageList","setViewPageList","currentSection","setCurrentSection","totalSection","setTotalSection","setView","FIRST_INDEX","LAST_INDEX","length","slice","setViewPage","totalPage","Math","ceil","page","push"],"sources":["/Users/jeongjaeho/Desktop/프로젝트/Board/frontend/src/Board/Hooks/pagination.hook.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\n\nconst usePagination =<T>(countPerPage:number)=>{\n    // state: 전체 객체 리스트 상태 \n    const [totalList,setTotalList]=useState<T[]>([]);\n    // state: 보여줄 객체 리스트 상태 \n    const [viewList,setViewList]=useState<T[]>([]);\n    //state: 현재 페이지 번호 상태 \n    const [currentPage,setCurrentPage]=useState<number>(1);\n\n    //state: 전체 페이지 번호 리스트 상태 \n    const [totalPageList,setTotalPageList]=useState<number[]>([1]);\n    //state: 보여줄 페이지 번호 리스트 상태 \n    const [viewPageList,setViewPageList]=useState<number[]>([1]);\n\n    //state: 현재 섹션 상태 \n    const [currentSection,setCurrentSection]=useState<number>(1);\n    //state: 전체 섹션 상태 \n    const [totalSection,setTotalSection]=useState<number>(1);\n    \n    //function: 보여줄 객체 리스트 추출 함수 \n    const setView =()=>{\n        const FIRST_INDEX =countPerPage*(currentPage -1);\n        const LAST_INDEX = totalList.length>countPerPage*currentPage?countPerPage*currentPage:totalList.length;\n\n        const viewList=totalList.slice(FIRST_INDEX,LAST_INDEX);\n        setViewList(viewList);\n    }\n\n    //function: 보여줄 페이지 리스트 추출 함수 \n    const setViewPage =()=>{\n        const FIRST_INDEX=10*(currentSection-1);\n        const LAST_INDEX=totalPageList.length>10*currentSection?10*currentSection:totalPageList.length;\n        const viewPageList=totalPageList.slice(FIRST_INDEX,LAST_INDEX);\n        setViewPageList(viewPageList);\n    }\n\n    //effect: total list가 변경될때마다 실행할 작업 \n    useEffect(()=>{\n        const totalPage=Math.ceil(totalList.length/countPerPage);\n        const totalPageList:number[]=[];\n        for(let page=1; page<=totalPage; page++) totalPageList.push(page);\n        setTotalPageList(totalPageList);\n        \n        const totalSection=Math.ceil(totalList.length/(countPerPage *10));\n        setTotalSection(totalSection);\n\n        setCurrentPage(1);\n        setCurrentSection(1);\n    },[totalList, countPerPage])\n\n    //effect: current page가 변경될때마다 실행할 작업 \n    useEffect(()=>{\n        setView();\n    },[currentPage, totalList, countPerPage])\n\n    //effect: current section이 변경될때마다 실행할 작업 \n    useEffect(()=>{\n        setViewPage();\n    },[currentSection, totalPageList])\n\n    return{\n        currentPage,\n        setCurrentPage,\n        currentSection,\n        setCurrentSection,\n        viewList,\n        viewPageList,\n        totalSection,\n        setTotalList\n    };\n}\n\nexport default usePagination;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}