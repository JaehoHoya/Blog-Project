{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaeho/Desktop/project/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState, useRef } from 'react';\nimport { Title } from './style/mycss';\n\n//다자인은 app밖에다 다시 그릴 필요 없기 때문에,정적이기 때문에, css파일 만들기 import /App.css;\n//스타일 컴포넌트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [list, setList] = useState([1, 2, 3, 4]);\n  const [data, setData] = useState(0);\n  const [search, setSearch] = useState(0);\n  const [str, setStr] = useState('합계');\n  const getADD = () => {\n    let sum = 0;\n    list.forEach(i => sum = sum + i);\n    console.log(\"sum함수 실행됨\", sum);\n    return sum;\n  };\n  //useMemo : 메모리 라이제이션(기억) hook라이브러리 \n  const aaa = useMemo(() => getADD(), [list]);\n\n  //실행 시점: 1.App() 그림이 최초 그려질때 2.상태변수가 변경될때 3.의존리시트 관리할 수 있음 \n  useEffect(() => {\n    console.log('useEffect 실행됨');\n  }, [search]); //[] 어디에도 의존하지 않고 최초에만 실행 \n  //useRef (디자인) -dom을 변경할때 사용\n  const myref = useRef(null);\n\n  //***************************************************************\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"AnvnUbPPZW6nWWc0AhXR1JJu6Co=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","useRef","Title","jsxDEV","_jsxDEV","App","_s","list","setList","data","setData","search","setSearch","str","setStr","getADD","sum","forEach","i","console","log","aaa","myref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeongjaeho/Desktop/project/frontend/src/App.js"],"sourcesContent":["import React, { useEffect,useMemo,useState,useRef } from 'react';\n\nimport {Title} from './style/mycss';\n\n//다자인은 app밖에다 다시 그릴 필요 없기 때문에,정적이기 때문에, css파일 만들기 import /App.css;\n//스타일 컴포넌트\n\nfunction App() {\nconst[list,setList]=useState([1,2,3,4]);\nconst[data,setData]=useState(0);\nconst[search,setSearch]=useState(0);\nconst[str,setStr]=useState('합계');\nconst getADD=()=>{\n  let sum=0;\n  list.forEach(i=>sum=sum+i);\n  console.log(\"sum함수 실행됨\",sum)\n  return sum;\n}\n//useMemo : 메모리 라이제이션(기억) hook라이브러리 \nconst aaa=useMemo(()=>getADD(),[list]);\n\n\n//실행 시점: 1.App() 그림이 최초 그려질때 2.상태변수가 변경될때 3.의존리시트 관리할 수 있음 \nuseEffect(()=>{\nconsole.log('useEffect 실행됨');\n\n},[search]); //[] 어디에도 의존하지 않고 최초에만 실행 \n//useRef (디자인) -dom을 변경할때 사용\nconst myref=useRef(null);\n\n\n//***************************************************************\n  return (\n  <div>\n    \n  \n  </div>\n  );\n\n}\n\nexport default App;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAACC,OAAO,EAACC,QAAQ,EAACC,MAAM,QAAQ,OAAO;AAEhE,SAAQC,KAAK,QAAO,eAAe;;AAEnC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAK,CAACC,IAAI,EAACC,OAAO,CAAC,GAACR,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EACvC,MAAK,CAACS,IAAI,EAACC,OAAO,CAAC,GAACV,QAAQ,CAAC,CAAC,CAAC;EAC/B,MAAK,CAACW,MAAM,EAACC,SAAS,CAAC,GAACZ,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAK,CAACa,GAAG,EAACC,MAAM,CAAC,GAACd,QAAQ,CAAC,IAAI,CAAC;EAChC,MAAMe,MAAM,GAACA,CAAA,KAAI;IACf,IAAIC,GAAG,GAAC,CAAC;IACTT,IAAI,CAACU,OAAO,CAACC,CAAC,IAAEF,GAAG,GAACA,GAAG,GAACE,CAAC,CAAC;IAC1BC,OAAO,CAACC,GAAG,CAAC,WAAW,EAACJ,GAAG,CAAC;IAC5B,OAAOA,GAAG;EACZ,CAAC;EACD;EACA,MAAMK,GAAG,GAACtB,OAAO,CAAC,MAAIgB,MAAM,CAAC,CAAC,EAAC,CAACR,IAAI,CAAC,CAAC;;EAGtC;EACAT,SAAS,CAAC,MAAI;IACdqB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAE5B,CAAC,EAAC,CAACT,MAAM,CAAC,CAAC,CAAC,CAAC;EACb;EACA,MAAMW,KAAK,GAACrB,MAAM,CAAC,IAAI,CAAC;;EAGxB;EACE,oBACAG,OAAA;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGK,CAAC;AAGR;AAACpB,EAAA,CAhCQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}